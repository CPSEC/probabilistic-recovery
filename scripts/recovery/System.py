import numpy as np
from scipy.signal import StateSpace


class System():
    def __init__(self, dt, u_min, u_max):
        # self.u0 = [1.91295e+01, 1e-5, 1e-5, 1e-5] # option one: there is a constant part. Linearization is not very good
        self.u0 = [1.91295e+01, 0, 0, 0] # option two: some modes become uncontrollable
        # states  x1, x2, x3, v1, v2, v3, r11, r12, r13, r21, r22, r23, r31, r32, r33, w1, w2, w3
        self.x0 = [0,  0, -1,  0,  0,  0,   1,   0,   0,   0,   1,   0,   0,   0,   1,  0,  0,  0] # Change this one
        x0 = self.x0
        u0 = self.u0
        m = 1.95
        J = np.diag([0.02, 0.02, 0.04])
        j11 = J[0, 0]
        j22 = J[1, 1]
        j33 = J[2, 2]
        self.A = [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
                  [0, 0, 0, 0, 0, 0, 0, 0, -u0[0]/m, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -u0[0]/m, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -u0[0]/m, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, x0[17], -x0[16], 0, 0, 0, 0, 0, 0, 0, -x0[8], x0[7]],
                  [0, 0, 0, 0, 0, 0, -x0[17], 0, x0[15], 0, 0, 0, 0, 0, 0, x0[8], 0, -x0[6]],
                  [0, 0, 0, 0, 0, 0, x0[16], -x0[15], 0, 0, 0, 0, 0, 0, 0, -x0[7], x0[6], 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x0[17], -x0[16], 0, 0, 0, 0, -x0[11], x0[10]],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, -x0[17], 0, x0[15], 0, 0, 0, x0[11], 0, -x0[9]],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, x0[16], -x0[15], 0, 0, 0, 0, -x0[10], x0[9], 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x0[17], -x0[16], 0, -x0[14], x0[13]],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x0[17], 0, x0[15], x0[14], 0, -x0[12]],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x0[16], -x0[15], 0, -x0[13], x0[12], 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (j22 - j33) * x0[17]/j11,  (j22 - j33) * x0[16]/j11],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(j11 - j33) * x0[17]/j22, 0, -(j11 - j33) * x0[15]/j22],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (j11 - j22) * x0[16]/j33, (j11 - j22) * x0[15]/j33, 0]]
        self.B = [[          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [ -x0[8] / m,     0,     0,     0],
                  [-x0[11] / m,     0,     0,     0],
                  [-x0[14] / m,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0, 1/j11,     0,     0],
                  [          0,     0, 1/j22,     0],
                  [          0,     0,     0, 1/j33]]
        self.C = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
        self.D = [[ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0]]
        self.n = len(self.A)
        self.m = len(self.B[0])
        self.x0 = np.array(self.x0).reshape((self.n, ))
        self.u0 = np.array(self.u0).reshape((self.m, ))
        self.dt = dt
        # self.u_min = np.array( [V_MIN, HEADING_MIN] )
        # self.u_max = np.array( [V_MAX, HEADING_MAX] )
        self.u_min = np.array( u_min )
        self.u_max = np.array( u_max )
        sysc = StateSpace(self.A, self.B, self.C, self.D)
        sysd = sysc.to_discrete(self.dt)
        self.Ad = sysd.A
        self.Bd = sysd.B
        self.Cd = sysd.C
        self.Dd = sysd.D
        