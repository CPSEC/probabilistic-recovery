import numpy as np
from scipy.signal import StateSpace


class SystemModel():
    def __init__(self, dt, u_min, u_max):
        # self.u0 = [1.91295e+01, 1e-5, 1e-5, 1e-5] # option one: there is a constant part. Linearization is not very good
        self.u0 = [1.91295e+01, 0, 0, 0] # option two: some modes become uncontrollable
        # state    0,  1,  2,  3,  4,  5,   6,   7,   8,   9,  10,  11,  12,  13,  14, 15, 16, 17
        # states  x1, x2, x3, v1, v2, v3, r11, r12, r13, r21, r22, r23, r31, r32, r33, w1, w2, w3
        self.x0 = [0,  0, -10,  0,  0,  0,   1,   0,   0,   0,   1,   0,   0,   0,   1,  0,  0,  0] 
        x0 = self.x0
        u0 = self.u0
        m = 1.95
        g = 9.8
        J = np.diag([0.02, 0.02, 0.04])
        j11 = J[0, 0]
        j22 = J[1, 1]
        j33 = J[2, 2]
        def compute_A(x, u):
            # print('x arrive to jacobian', x)
            A = [[1, 0, 0, dt,  0,  0,         0,         0,            0,         0,         0,            0,         0,         0,            0,                              0,                             0,                                0],\
                 [0, 1, 0,  0, dt,  0,         0,         0,            0,         0,         0,            0,         0,         0,            0,                              0,                             0,                                0],\
                 [0, 0, 1,  0,  0, dt,         0,         0,            0,         0,         0,            0,         0,         0,            0,                              0,                             0,                                0],\
                 [0, 0, 0,  1,  0,  0,         0,         0, -(dt*u[0])/m,         0,         0,            0,         0,         0,            0,                              0,                             0,                                0],\
                 [0, 0, 0,  0,  1,  0,         0,         0,            0,         0,         0, -(dt*u[0])/m,         0,         0,            0,                              0,                             0,                                0],\
                 [0, 0, 0,  0,  0,  1,         0,         0,            0,         0,         0,            0,         0,         0, -(dt*u[0])/m,                              0,                             0,                                0],\
                 [0, 0, 0,  0,  0,  0,         1,  dt*x[17],    -dt*x[16],         0,         0,            0,         0,         0,            0,                              0,                      -dt*x[8],                          dt*x[7]],\
                 [0, 0, 0,  0,  0,  0,         0,         1,            0,         0,  dt*x[17],    -dt*x[16],         0,         0,            0,                              0,                     -dt*x[11],                         dt*x[10]],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            1,         0,         0,            0,         0,  dt*x[17],    -dt*x[16],                              0,                     -dt*x[14],                         dt*x[13]],\
                 [0, 0, 0,  0,  0,  0, -dt*x[17],         0,     dt*x[15],         1,         0,            0,         0,         0,            0,                        dt*x[8],                             0,                         -dt*x[6]],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0, -dt*x[17],         1,     dt*x[15],         0,         0,            0,                       dt*x[11],                             0,                         -dt*x[9]],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,         0,         0,            1, -dt*x[17],         0,     dt*x[15],                       dt*x[14],                             0,                        -dt*x[12]],\
                 [0, 0, 0,  0,  0,  0,  dt*x[16], -dt*x[15],            0,         0,         0,            0,         1,         0,            0,                       -dt*x[7],                       dt*x[6],                                0],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,  dt*x[16], -dt*x[15],            0,         0,         1,            0,                      -dt*x[10],                       dt*x[9],                                0],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,         0,         0,            0,  dt*x[16], -dt*x[15],            1,                      -dt*x[13],                      dt*x[12],                                0],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,         0,         0,            0,         0,         0,            0,                              1, (dt * (j22 - j33) *x[17])/j11,   (dt * (j22 - j33) * x[16])/j11],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,         0,         0,            0,         0,         0,            0, -(dt*(j11 - j33) * x[17] )/j22,                              1, -(dt * (j11 - j33) * x[15])/j22],\
                 [0, 0, 0,  0,  0,  0,         0,         0,            0,         0,         0,            0,         0,         0,            0,  (dt*(j11 - j22) * x[16] )/j33, (dt * (j11 - j22) * x[15])/j33,                              1]]

            
            A = np.array(A)
            return A
        def compute_B(x, u):
            B = [ [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [  -x[8] / m,     0,     0,     0],
                  [ -x[11] / m,     0,     0,     0],
                  [ -x[14] / m,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0,     0,     0,     0],
                  [          0, 1/j11,     0,     0],
                  [          0,     0, 1/j22,     0],
                  [          0,     0,     0, 1/j33]]
            return np.array(B) * dt
        
        self.ode = lambda t, x, u: np.array([
            x[3],\
            x[4],\
            x[5],\
            -(x[8] * u[0]) / m,\
            -(x[11] * u[0]) / m,\
            g - x[14] * u[0] / m,\
            x[7] * x[17] - x[8] * x[16],\
            x[10] * x[17] - x[11] * x[16],\
            x[13] * x[17] - x[14] * x[16],\
            x[8] * x[15] - x[6] * x[17],\
            x[11] * x[15] - x[9] * x[17],\
            x[14] * x[15] - x[12] - x[17],\
            x[6] * x[16] - x[7] * x[15],\
            x[9] * x[16] - x[10] * x[15],\
            x[12] * x[16] - x[13] * x[15],\
            (u[1] + j22 * x[16] * x[17] - j33 * x[16] * x[17]) / j11,\
            (u[2] - j11 * x[15] * x[17] + j33 * x[15] * x[17]) / j22,\
            (u[3] + j11 * x[15] * x[16] - j22 * x[15] * x[16]) / j33 ])


        self.fd  = lambda x, u: x + self.ode(0, x, u) * dt
        self.jfx = lambda x, u: compute_A(x, u)
        self.jfu = lambda x, u: compute_B(x, u)

        self.Ad = self.jfx(x0, u0)
        # print(self.Ad)
        self.Bd = self.jfu(x0, u0)
        self.Cd = np.eye(len(self.Ad))
        self.Dd = [[ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0],
                [ 0, 0, 0, 0]]
        
        self.n = len(self.Ad)
        self.m = len(self.Bd[0])
        self.x0 = np.array(self.x0).reshape((self.n, ))
        self.u0 = np.array(self.u0).reshape((self.m, ))
        self.dt = dt
        # self.u_min = np.array( [V_MIN, HEADING_MIN] )
        # self.u_max = np.array( [V_MAX, HEADING_MAX] )
        self.u_min = np.array( u_min )
        self.u_max = np.array( u_max )
        # sysc = StateSpace(self.A, self.B, self.C, self.D)
        sysd = StateSpace(self.Ad, self.Bd, self.Cd, self.Dd)
        self.Ad = sysd.A
        self.Bd = sysd.B
        self.Cd = sysd.C
        self.Dd = sysd.D

    def update_u_constraints(self, u_min, u_max):
        self.u_min = u_min
        self.u_max = u_max



        # [[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
        #           [0, 0, 0, 0, 0, 0, 0, 0, -u[0]/m, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -u[0]/m, 0, 0, 0, 0, 0, 0],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -u[0]/m, 0, 0, 0],
        #           [0, 0, 0, 0, 0, 0, 0, x[17], -x[16], 0, 0, 0, 0, 0, 0, 0, -x[8], x[7]],
        #           [0, 0, 0, 0, 0, 0, -x[17], 0, x[15], 0, 0, 0, 0, 0, 0, x[8], 0, -x[6]],
        #           [0, 0, 0, 0, 0, 0, x[16], -x[15], 0, 0, 0, 0, 0, 0, 0, -x[7], x[6], 0],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x[17], -x[16], 0, 0, 0, 0, -x[11], x[10]],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, -x[17], 0, x[15], 0, 0, 0, x[11], 0, -x[9]],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, x[16], -x[15], 0, 0, 0, 0, -x[10], x[9], 0],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x[17], -x[16], 0, -x[14], x[13]],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -x[17], 0, x[15], x[14], 0, -x[12]],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x[16], -x[15], 0, -x[13], x[12], 0],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (j22 - j33) * x[17]/j11,  (j22 - j33) * x[16]/j11],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(j11 - j33) * x[17]/j22, 0, -(j11 - j33) * x[15]/j22],
        #           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (j11 - j22) * x[16]/j33, (j11 - j22) * x[15]/j33, 0]]
        
        # [[          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [ -x[8] / m,     0,     0,     0],
        #           [-x[11] / m,     0,     0,     0],
        #           [-x[14] / m,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0,     0,     0,     0],
        #           [          0, 1/j11,     0,     0],
        #           [          0,     0, 1/j22,     0],
        #           [          0,     0,     0, 1/j33]]
        